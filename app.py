import streamlit as st
import numpy as np
import sympy as sp
import plotly.graph_objects as go

st.set_page_config(page_title="T√≠ch ph√¢n g·∫ßn ƒë√∫ng ‚Äì H√¨nh thang v√† Simpson", layout="wide")

st.title("·ª®NG D·ª§NG MINH H·ªåA T√çNH T√çCH PH√ÇN G·∫¶N ƒê√öNG")
st.markdown("### B·∫±ng c√¥ng th·ª©c H√¨nh thang v√† Simpson")

# Giao di·ªán nh·∫≠p 
col1, col2 = st.columns(2)
with col1:
    func_str = st.text_input("H√†m f(x):", "x**2 + 2*x + 1")
with col2:
    mode = st.radio("Ch·ªçn c√°ch nh·∫≠p:", ["Nh·∫≠p s·ªë kho·∫£ng n", "Nh·∫≠p sai s·ªë t·ªëi ƒëa Œµ"])

a = st.number_input("C·∫≠n d∆∞·ªõi a:", value=0.0)
b = st.number_input("C·∫≠n tr√™n b:", value=2.0)

methods = st.multiselect(
    "Ch·ªçn c√¥ng th·ª©c mu·ªën s·ª≠ d·ª•ng:",
    ["H√¨nh thang", "Simpson"],
    default=["H√¨nh thang", "Simpson"]
)

if mode == "Nh·∫≠p s·ªë kho·∫£ng n":
    n = st.slider("S·ªë kho·∫£ng chia n:", min_value=2, max_value=200, value=6, step=2)
    eps = None
else:
    eps = st.number_input("Sai s·ªë t·ªëi ƒëa Œµ:", value=0.001, min_value=1e-8, step=1e-4, format="%.6f")
    n = None

# Chu·∫©n b·ªã h√†m
x = sp.Symbol("x")
try:
    f = sp.sympify(func_str)
    f_lambda = sp.lambdify(x, f, "numpy")
except Exception as e:
    st.error(f"L·ªói trong bi·ªÉu th·ª©c h√†m: {e}")
    st.stop()

# T√≠ch ph√¢n ch√≠nh x√°c
try:
    I_exact = float(sp.integrate(f, (x, a, b)))
except Exception:
    I_exact = None

# H√†m t√≠nh t√≠ch ph√¢n g·∫ßn ƒë√∫ng
def calc_trapezoidal(f_lambda, a, b, n):
    X = np.linspace(a, b, n + 1)
    Y = f_lambda(X)
    h = (b - a) / n
    I = (h / 2) * (Y[0] + 2 * np.sum(Y[1:-1]) + Y[-1])
    return I, X, Y

def calc_simpson(f_lambda, a, b, n):
    if n % 2 == 1:
        n += 1
    X = np.linspace(a, b, n + 1)
    Y = f_lambda(X)
    h = (b - a) / n
    I = (h / 3) * (Y[0] + 4 * np.sum(Y[1:-1:2]) + 2 * np.sum(Y[2:-2:2]) + Y[-1])
    return I, X, Y

# N·∫øu nh·∫≠p Œµ th√¨ t√¨m n t·ª± ƒë·ªông
if eps is not None and I_exact is not None:
    f2 = sp.diff(f, (x, 2))
    f2_lambda = sp.lambdify(x, f2, "numpy")
    xs = np.linspace(a, b, 200)
    try:
        M2 = np.max(np.abs(f2_lambda(xs)))
        n_est = int(np.ceil(np.sqrt(((b - a) ** 3 * M2) / (12 * eps))))
        n = max(2, n_est)
        st.info(f"üîç ∆Ø·ªõc l∆∞·ª£ng n t·ªëi ∆∞u ‚âà **{n}** (theo sai s·ªë h√¨nh thang Œµ = {eps})")
    except Exception:
        st.warning("Kh√¥ng th·ªÉ ∆∞·ªõc l∆∞·ª£ng sai s·ªë do h√†m f''(x) kh√¥ng kh·∫£ d·ª•ng.")
        n = 10

# T√≠nh t√≠ch ph√¢n g·∫ßn ƒë√∫ng
results = {}
if "H√¨nh thang" in methods:
    I_trap, X_trap, Y_trap = calc_trapezoidal(f_lambda, a, b, n)
    results["H√¨nh thang"] = (I_trap, X_trap, Y_trap)
if "Simpson 1/3" in methods:
    I_simp, X_simp, Y_simp = calc_simpson(f_lambda, a, b, n)
    results["Simpson 1/3"] = (I_simp, X_simp, Y_simp)

# Hi·ªÉn th·ªã k·∫øt qu·∫£
st.subheader("K·∫øt qu·∫£ t√≠nh to√°n")
cols = st.columns(len(results) + 1)
i = 0
for name, (I, _, _) in results.items():
    cols[i].metric(name, f"{I:.6f}")
    i += 1
if I_exact is not None:
    cols[-1].metric("T√≠ch ph√¢n ch√≠nh x√°c", f"{I_exact:.6f}")

if I_exact is not None:
    for name, (I, _, _) in results.items():
        st.write(f"üîπ Sai s·ªë {name}: {abs(I - I_exact):.3e}")

# B·∫£ng gi√° tr·ªã
st.subheader("B·∫£ng gi√° tr·ªã (xi, f(xi))")
for name, (_, X, Y) in results.items():
    st.markdown(f"#### {name}")
    data = {"i": range(len(X)), "xi": X, "f(xi)": Y}
    st.dataframe(data, hide_index=True, use_container_width=True)

# ƒê·ªì th·ªã t√≠ch ph√¢n g·∫ßn ƒë√∫ng
st.subheader("Minh h·ªça v√πng t√≠ch ph√¢n")
xx = np.linspace(a, b, 400)
yy = f_lambda(xx)
fig = go.Figure()

fig.add_trace(go.Scatter(x=xx, y=yy, mode="lines", name="f(x)", line=dict(color="blue")))
fig.add_trace(go.Scatter(x=np.concatenate(([a], xx, [b])), y=np.concatenate(([0], yy, [0])),
                         fill='toself', name="V√πng t√≠ch ph√¢n", fillcolor="skyblue", opacity=0.3))

colors = {"H√¨nh thang": "red", "Simpson": "green"}
for name, (_, X, Y) in results.items():
    fig.add_trace(go.Scatter(x=X, y=Y, mode="markers+lines",
                             name=f"ƒêi·ªÉm {name} (n={n})",
                             line=dict(color=colors.get(name, "gray"), dash="dot")))

fig.update_layout(xaxis_title="x", yaxis_title="f(x)", height=500, legend_title="Ch√∫ th√≠ch")
st.plotly_chart(fig, use_container_width=True)

# Bi·ªÉu ƒë·ªì h·ªôi t·ª• sai s·ªë 
if I_exact is not None:
    st.subheader("Bi·ªÉu ƒë·ªì h·ªôi t·ª• sai s·ªë")
    ns = np.array([2, 4, 8, 16, 32, 64, 128])
    err_trap = []
    err_simp = []
    for n_ in ns:
        I_t, _, _ = calc_trapezoidal(f_lambda, a, b, n_)
        I_s, _, _ = calc_simpson(f_lambda, a, b, n_)
        err_trap.append(abs(I_t - I_exact))
        err_simp.append(abs(I_s - I_exact))
    
    fig_err = go.Figure()
    fig_err.add_trace(go.Scatter(x=np.log10(ns), y=np.log10(err_trap),
                                 mode="lines+markers", name="H√¨nh thang", line=dict(color="red")))
    fig_err.add_trace(go.Scatter(x=np.log10(ns), y=np.log10(err_simp),
                                 mode="lines+markers", name="Simpson 1/3", line=dict(color="green")))
    fig_err.update_layout(
        xaxis_title="log10(n)",
        yaxis_title="log10(Sai s·ªë)",
        height=500,
        legend_title="C√¥ng th·ª©c",
        title="Bi·ªÉu ƒë·ªì h·ªôi t·ª• sai s·ªë: ƒë·ªô d·ªëc th·ªÉ hi·ªán t·ªëc ƒë·ªô h·ªôi t·ª•"
    )
    st.plotly_chart(fig_err, use_container_width=True)

st.caption("·ª®ng d·ª•ng minh h·ªça c√¥ng th·ª©c H√¨nh thang v√† Simpson.")
